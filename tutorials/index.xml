<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Jan Savage</title>
    <link>https://dersavage.github.io/main/tutorials/</link>
    <description>Recent content in Tutorials on Jan Savage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 06 Jan 2024 14:34:23 +0800</lastBuildDate><atom:link href="https://dersavage.github.io/main/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blackjack in C#</title>
      <link>https://dersavage.github.io/main/tutorials/blackjackincs/</link>
      <pubDate>Sat, 06 Jan 2024 14:34:23 +0800</pubDate>
      
      <guid>https://dersavage.github.io/main/tutorials/blackjackincs/</guid>
      <description>Some of you from Quora know that I am very pro-C#. But what has C# got that Java, C and C++ haven&amp;rsquo;t?
I guess the simplest possible answer is that C# is programmer-friendlier than the above three combined, carries most of their advantages and none of their disadvantages.
If you know some Python, I invite you to take a look at this simple game of Blackjack I wrote in C#:</description>
    </item>
    
    <item>
      <title>Truly Object-oriented in &#39;Twin Peaks&#39;</title>
      <link>https://dersavage.github.io/main/tutorials/oop-in-swift-grounds/</link>
      <pubDate>Sun, 29 Jan 2023 13:12:52 +0800</pubDate>
      
      <guid>https://dersavage.github.io/main/tutorials/oop-in-swift-grounds/</guid>
      <description>This is the first post in the CR&amp;ndash;Code Review&amp;ndash;series. I hit upon the idea after I found this interesting discussion regarding Swift playgrounds, book 2 (Let&amp;rsquo;s Code 2), chapter named &amp;lsquo;Twin Peaks&amp;rsquo; in Scrabtree&amp;rsquo;s website, where he lamented his very long solution compared to Samantha&amp;rsquo;s shorter solution.
The purpose of this CR is to bring learners&amp;rsquo; attention to an interesting thing about object orientation: objects can be interdependent even if they were instantiated independently.</description>
    </item>
    
    <item>
      <title>How I teach</title>
      <link>https://dersavage.github.io/main/tutorials/how-i-teach/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dersavage.github.io/main/tutorials/how-i-teach/</guid>
      <description>This post showcases how I teach, but it can also be useful to someone who has been through the tutorial hell and wants to experience real learning. The topic is a brief introduction to objects in Ruby, and no assumptions have been made except the most rudimentary experience with programming, say, the Is programming for you chapter in the Tuts category.
Everything is an Object Now then, in Ruby, variables are disloyal:</description>
    </item>
    
    <item>
      <title>Is programming for you?</title>
      <link>https://dersavage.github.io/main/tutorials/programming-101/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dersavage.github.io/main/tutorials/programming-101/</guid>
      <description>Suppose I want to write a &amp;ldquo;verb&amp;rdquo;, which we call a function in programming, that returns (gives us) a greeting. In Julia language, this is how we do it:
function greetbot() return &amp;#34;how do you do?&amp;#34; end So, function is a reserved keyword that is used to construction a procedure in Julia. The name greetbot I chose can be anything that is clear and suitable to the task. It must be followed by () so as to give the impression that this is a function, a verb, a procedure.</description>
    </item>
    
  </channel>
</rss>
