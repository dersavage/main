<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Jan Savage</title>
        <link>https://dersavage.github.io/main/posts/</link>
        <description>Recent content in Posts on Jan Savage</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 21 Mar 2023 08:23:18 +0800</lastBuildDate>
        <atom:link href="https://dersavage.github.io/main/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>LR: Why Lisp is horrible</title>
            <link>https://dersavage.github.io/main/posts/2023/03/lr-why-lisp-is-horrible/</link>
            <pubDate>Tue, 21 Mar 2023 08:23:18 +0800</pubDate>
            
            <guid>https://dersavage.github.io/main/posts/2023/03/lr-why-lisp-is-horrible/</guid>
            <description>This is a first post in LR category&amp;ndash;Language Review&amp;ndash;where I will factually opine on various programming languages. And today&amp;rsquo;s victim is Lisp.
Or first, let me say the emperor has no clothes, or Scheme is an awful language.
I mean, not only it is an awful first language to teach beginners, or to self-learn on your own, but also in general, as a programming language in 2023, it is not as great as it&amp;rsquo;s cracked up to be.</description>
            <content type="html"><![CDATA[<p>This is a first post in LR category&ndash;Language Review&ndash;where I will factually opine on various programming languages. And today&rsquo;s victim is Lisp.</p>
<p>Or first, let me say the emperor has no clothes, or Scheme is an awful language.</p>
<p>I mean, not only it is an awful first language to teach beginners, or to self-learn on your own, but also in general, as a programming language in 2023, it is not as great as it&rsquo;s cracked up to be. I will not go through all the other arguments made by others. Those are all (still) valid. I will approach this from a different angle, and given this angle, my rant applies to both Scheme and all other Lisps, including Common Lisp and Racket.</p>
<p>And that angle is the simple and useful and elegant aspects of readability and features. Programs are meant to be read more often than written, and as a programmer, I like to visually &ldquo;see&rdquo; my program in a way that matches how my brain &ldquo;sees&rdquo; the abstractness of the program. In other words, a programming language I will use to learn something should match how my brain works, rather than to force my brain to become like that language. Additionally, I would want my language to have all the standard features I need, right out of the box.</p>
<p>Whether a language become popular in the industry is directly based on this, in my opinion.</p>
<p>In this post I will only mention my first beef (regarding visual appeal and readability and conciseness) with Lisps including Scheme. Interestingly, my beef is not a mere rant as it is backed by a heavyweight like Wadler (Wadler, 1987) where he uses a simple example to deride Lisp&rsquo;s visual appeal:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Scheme" data-lang="Scheme"><span style="display:flex;"><span>(<span style="color:#fff;font-weight:bold">define </span>(sum xs)
</span></span><span style="display:flex;"><span>  (<span style="color:#fff;font-weight:bold">if </span>null? xs)
</span></span><span style="display:flex;"><span>    <span style="color:#ff0;font-weight:bold">0</span>
</span></span><span style="display:flex;"><span>      (<span style="color:#fff;font-weight:bold">+ </span>(<span style="color:#fff;font-weight:bold">car </span>xs) (sum cdr xs)))))
</span></span></code></pre></div><p>Phew!</p>
<p>All that ceremony to just do this:</p>
<pre tabindex="0"><code class="language-Miranda" data-lang="Miranda">sum [] = 0 
sum (x:xs) = x + sum xs
</code></pre><p>Wasn&rsquo;t that much better?</p>
<p>And:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Haskell" data-lang="Haskell"><span style="display:flex;"><span>som <span style="color:#fff;font-weight:bold">[]</span> = <span style="color:#ff0;font-weight:bold">0</span>
</span></span><span style="display:flex;"><span>som (x<span style="color:#fff;font-weight:bold">:</span>xs) = x + som xs
</span></span></code></pre></div><p>Renaming <code>sum</code> to <code>som</code> here to avoid conflict with a Haskell primitive named <code>sum</code> (<em>Newbie tip</em>: that is, Haskell already has a built-in function of this name.).</p>
<p>Exactly the same, right?</p>
<p>To fully illustrate the problem, let&rsquo;s write a larger program to demonstrate how quickly you will get lost in the parenthetical jungle. We write a function that counts how many days have passed from a given date. If you don&rsquo;t know Lisp, look at the other solutions below first, before coming back to the Lisp one. Look at this mess (and this is as compact as it can be written):</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Scheme" data-lang="Scheme"><span style="display:flex;"><span>(<span style="color:#fff;font-weight:bold">define </span>(leap-year? year)
</span></span><span style="display:flex;"><span>  (<span style="color:#fff;font-weight:bold">if </span>(<span style="color:#fff;font-weight:bold">or </span>(<span style="color:#fff;font-weight:bold">not </span>(<span style="color:#fff;font-weight:bold">zero? </span>(<span style="color:#fff;font-weight:bold">remainder </span>year <span style="color:#ff0;font-weight:bold">4</span>)))
</span></span><span style="display:flex;"><span>          (<span style="color:#fff;font-weight:bold">and </span>(<span style="color:#fff;font-weight:bold">zero? </span>(<span style="color:#fff;font-weight:bold">remainder </span>year <span style="color:#ff0;font-weight:bold">100</span>))
</span></span><span style="display:flex;"><span>               (<span style="color:#fff;font-weight:bold">not </span>(<span style="color:#fff;font-weight:bold">zero? </span>(<span style="color:#fff;font-weight:bold">remainder </span>year <span style="color:#ff0;font-weight:bold">400</span>)))))
</span></span><span style="display:flex;"><span>      #f
</span></span><span style="display:flex;"><span>      #t))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#fff;font-weight:bold">define </span>(days-since year month day)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  (<span style="color:#fff;font-weight:bold">define </span>month-days (<span style="color:#fff;font-weight:bold">list </span><span style="color:#ff0;font-weight:bold">31</span> <span style="color:#ff0;font-weight:bold">28</span> <span style="color:#ff0;font-weight:bold">31</span> <span style="color:#ff0;font-weight:bold">30</span> <span style="color:#ff0;font-weight:bold">31</span> <span style="color:#ff0;font-weight:bold">30</span> <span style="color:#ff0;font-weight:bold">31</span> <span style="color:#ff0;font-weight:bold">31</span> <span style="color:#ff0;font-weight:bold">30</span> <span style="color:#ff0;font-weight:bold">31</span> <span style="color:#ff0;font-weight:bold">30</span> <span style="color:#ff0;font-weight:bold">31</span>))
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  (<span style="color:#fff;font-weight:bold">let </span>((total-days (<span style="color:#fff;font-weight:bold">* </span>(<span style="color:#ff0;font-weight:bold">1</span>- year) <span style="color:#ff0;font-weight:bold">365</span>)))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    (<span style="color:#fff;font-weight:bold">set! </span>total-days (<span style="color:#fff;font-weight:bold">+ </span>total-days (<span style="color:#fff;font-weight:bold">quotient </span>(<span style="color:#ff0;font-weight:bold">1</span>- year) <span style="color:#ff0;font-weight:bold">4</span>)))
</span></span><span style="display:flex;"><span>    (<span style="color:#fff;font-weight:bold">set! </span>total-days (<span style="color:#fff;font-weight:bold">- </span>total-days (<span style="color:#fff;font-weight:bold">quotient </span>(<span style="color:#ff0;font-weight:bold">1</span>- year) <span style="color:#ff0;font-weight:bold">100</span>)))
</span></span><span style="display:flex;"><span>    (<span style="color:#fff;font-weight:bold">set! </span>total-days (<span style="color:#fff;font-weight:bold">+ </span>total-days (<span style="color:#fff;font-weight:bold">quotient </span>(<span style="color:#ff0;font-weight:bold">1</span>- year) <span style="color:#ff0;font-weight:bold">400</span>)))
</span></span><span style="display:flex;"><span>   
</span></span><span style="display:flex;"><span>    (<span style="color:#fff;font-weight:bold">do </span>((i <span style="color:#ff0;font-weight:bold">0</span> (add1 i)))
</span></span><span style="display:flex;"><span>        ((<span style="color:#fff;font-weight:bold">= </span>i (<span style="color:#ff0;font-weight:bold">1</span>- month)) total-days)
</span></span><span style="display:flex;"><span>      (<span style="color:#fff;font-weight:bold">set! </span>total-days (<span style="color:#fff;font-weight:bold">+ </span>total-days (<span style="color:#fff;font-weight:bold">list-ref </span>month-days i))))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    (<span style="color:#fff;font-weight:bold">if </span>(<span style="color:#fff;font-weight:bold">and </span>(leap-year? year) (<span style="color:#fff;font-weight:bold">&gt; </span>month <span style="color:#ff0;font-weight:bold">2</span>))
</span></span><span style="display:flex;"><span>        (<span style="color:#fff;font-weight:bold">set! </span>total-days (add1 total-days)))
</span></span><span style="display:flex;"><span>    (<span style="color:#fff;font-weight:bold">set! </span>total-days (<span style="color:#fff;font-weight:bold">+ </span>total-days day))
</span></span><span style="display:flex;"><span>    total-days))
</span></span></code></pre></div><p>That&rsquo;s horrible. Imagine reading 20000 lines of this. No, thank you, but no means no.</p>
<p>Let&rsquo;s see the same in the elegant language that I have grown to love. In Swift, it is simply a matter of:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">func</span> daysSince(year: <span style="color:#fff;font-weight:bold">Int</span>, month: <span style="color:#fff;font-weight:bold">Int</span>, day: <span style="color:#fff;font-weight:bold">Int</span>) -&gt; <span style="color:#fff;font-weight:bold">Int</span> {
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// Array to store days in each month</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> monthDays = [<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">28</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">30</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">30</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">30</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">30</span>,<span style="color:#ff0;font-weight:bold">31</span>]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// Calculate the total number of days in the years before the given year</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">var</span> totalDays = (year - <span style="color:#ff0;font-weight:bold">1</span>) * <span style="color:#ff0;font-weight:bold">365</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// Add one extra day for each leap year</span>
</span></span><span style="display:flex;"><span>    totalDays += ((year - <span style="color:#ff0;font-weight:bold">1</span>) / <span style="color:#ff0;font-weight:bold">4</span>) - ((year - <span style="color:#ff0;font-weight:bold">1</span>) / <span style="color:#ff0;font-weight:bold">100</span>) + ((year - <span style="color:#ff0;font-weight:bold">1</span>) / <span style="color:#ff0;font-weight:bold">400</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// Calculate the total number of days in the given year</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> i <span style="color:#fff;font-weight:bold">in</span> <span style="color:#ff0;font-weight:bold">0.</span>.&lt;(month-<span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>        totalDays += monthDays[i]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// Add one extra day if it&#39;s a leap year and we&#39;re past February</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> month &gt; <span style="color:#ff0;font-weight:bold">2</span> &amp;&amp; ((year % <span style="color:#ff0;font-weight:bold">4</span> == <span style="color:#ff0;font-weight:bold">0</span> &amp;&amp; year % <span style="color:#ff0;font-weight:bold">100</span> != <span style="color:#ff0;font-weight:bold">0</span>) || year % <span style="color:#ff0;font-weight:bold">400</span> == <span style="color:#ff0;font-weight:bold">0</span>) {
</span></span><span style="display:flex;"><span>        totalDays += <span style="color:#ff0;font-weight:bold">1</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// Add the number of days in the current month</span>
</span></span><span style="display:flex;"><span>    totalDays += day
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> totalDays
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The annotations make it wordy, but the program logic is visually appealing and clear even without comments (which were added for the benefit of newbies reading this blog). Here is the un-annotated version:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">func</span> daysSince(year: <span style="color:#fff;font-weight:bold">Int</span>, month: <span style="color:#fff;font-weight:bold">Int</span>, day: <span style="color:#fff;font-weight:bold">Int</span>) -&gt; <span style="color:#fff;font-weight:bold">Int</span> {
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> monthDays = [<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">28</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">30</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">30</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">30</span>,<span style="color:#ff0;font-weight:bold">31</span>,<span style="color:#ff0;font-weight:bold">30</span>,<span style="color:#ff0;font-weight:bold">31</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">var</span> totalDays = (year - <span style="color:#ff0;font-weight:bold">1</span>) * <span style="color:#ff0;font-weight:bold">365</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    totalDays += ((year - <span style="color:#ff0;font-weight:bold">1</span>) / <span style="color:#ff0;font-weight:bold">4</span>) - ((year - <span style="color:#ff0;font-weight:bold">1</span>) / <span style="color:#ff0;font-weight:bold">100</span>) + ((year - <span style="color:#ff0;font-weight:bold">1</span>) / <span style="color:#ff0;font-weight:bold">400</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> i <span style="color:#fff;font-weight:bold">in</span> <span style="color:#ff0;font-weight:bold">0.</span>.&lt;(month-<span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>        totalDays += monthDays[i]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> month &gt; <span style="color:#ff0;font-weight:bold">2</span> &amp;&amp; ((year % <span style="color:#ff0;font-weight:bold">4</span> == <span style="color:#ff0;font-weight:bold">0</span> &amp;&amp; year % <span style="color:#ff0;font-weight:bold">100</span> != <span style="color:#ff0;font-weight:bold">0</span>) || year % <span style="color:#ff0;font-weight:bold">400</span> == <span style="color:#ff0;font-weight:bold">0</span>) {
</span></span><span style="display:flex;"><span>        totalDays += <span style="color:#ff0;font-weight:bold">1</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    totalDays += day
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> totalDays
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Actually, the clearest programming language is Hope, which is no longer alive, except it is, because Swift seems like modern Hope. Here is the same in Hope:</p>
<pre tabindex="0"><code class="language-Hope" data-lang="Hope">program DaysSince

function days-since(year: int, month: int, day: int) -&gt; int
    
    var totalDays: int;
    
    let monthDays: vector&lt;int&gt; = [31,28,31,30,31,30,31,31,30,31,30,31];
    
    func is-leap-year(_ year: int) -&gt; bool
        return (year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0;
    end
    
    totalDays = (year - 1) * 365;
    totalDays += (year - 1) / 4 - (year - 1) / 100 + (year - 1) / 400;
    
    for i in 0..&lt;(month - 1)
        totalDays += monthDays[i];
    
    if (is-leap-year(year) &amp;&amp; month &gt; 2)
        totalDays += 1;
   
    totalDays += day;
    return totalDays;
end
</code></pre><p>It&rsquo;s even clearer than Swift, but as it is a dead language, the second best choice is Swift. This is not to say Swift is the only coolest kid on the block. Let&rsquo;s look at a few more examples:</p>
<pre tabindex="0"><code class="language-F#" data-lang="F#">let rec daysSince year month day =
    
    let monthDays = [|31; 28; 31; 30; 31; 30; 31; 31; 30; 31; 30; 31|]
    
    let isLeapYear year =
        year % 4 = 0 &amp;&amp; (year % 100 &lt;&gt; 0 || year % 400 = 0)
    
    let numberOfLeapYears year =
        year / 4 - year / 100 + year / 400
    
    let mutable totalDays = (year - 1) * 365 + numberOfLeapYears year
    
    for i in 0..month-2 do
        totalDays &lt;- totalDays + monthDays.[i]
    
    if isLeapYear year &amp;&amp; month &gt; 2 then
        totalDays &lt;- totalDays + 1
    
    totalDays + day
</code></pre><p>Pretty neat, although somewhat clanky. Scala also claims to be highly readable. Let&rsquo;s see:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Scala" data-lang="Scala"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> daysSince(year<span style="color:#fff;font-weight:bold">:</span> <span style="color:#fff;font-weight:bold">Int</span>, month<span style="color:#fff;font-weight:bold">:</span> <span style="color:#fff;font-weight:bold">Int</span>, day<span style="color:#fff;font-weight:bold">:</span> <span style="color:#fff;font-weight:bold">Int</span>)<span style="color:#fff;font-weight:bold">:</span> <span style="color:#fff;font-weight:bold">Int</span> = {
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">val</span> monthDays <span style="color:#fff;font-weight:bold">=</span> Array(<span style="color:#ff0;font-weight:bold">31</span>, <span style="color:#ff0;font-weight:bold">28</span>, <span style="color:#ff0;font-weight:bold">31</span>, <span style="color:#ff0;font-weight:bold">30</span>, <span style="color:#ff0;font-weight:bold">31</span>, <span style="color:#ff0;font-weight:bold">30</span>, <span style="color:#ff0;font-weight:bold">31</span>, <span style="color:#ff0;font-weight:bold">31</span>, <span style="color:#ff0;font-weight:bold">30</span>, <span style="color:#ff0;font-weight:bold">31</span>, <span style="color:#ff0;font-weight:bold">30</span>, <span style="color:#ff0;font-weight:bold">31</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">def</span> isLeapYear(year<span style="color:#fff;font-weight:bold">:</span> <span style="color:#fff;font-weight:bold">Int</span>)<span style="color:#fff;font-weight:bold">:</span> <span style="color:#fff;font-weight:bold">Boolean</span> =
</span></span><span style="display:flex;"><span>        year % <span style="color:#ff0;font-weight:bold">4</span> == <span style="color:#ff0;font-weight:bold">0</span> &amp;&amp; (year % <span style="color:#ff0;font-weight:bold">100</span> != <span style="color:#ff0;font-weight:bold">0</span> || year % <span style="color:#ff0;font-weight:bold">400</span> == <span style="color:#ff0;font-weight:bold">0</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">val</span> numberOfLeapYears <span style="color:#fff;font-weight:bold">=</span> year / <span style="color:#ff0;font-weight:bold">4</span> - year / <span style="color:#ff0;font-weight:bold">100</span> + year / <span style="color:#ff0;font-weight:bold">400</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">var</span> totalDays <span style="color:#fff;font-weight:bold">=</span> (year - <span style="color:#ff0;font-weight:bold">1</span>) * <span style="color:#ff0;font-weight:bold">365</span> + numberOfLeapYears
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> (i <span style="color:#fff;font-weight:bold">&lt;-</span> <span style="color:#ff0;font-weight:bold">0</span> until month - <span style="color:#ff0;font-weight:bold">1</span>)
</span></span><span style="display:flex;"><span>        totalDays += monthDays(i)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (isLeapYear(year) &amp;&amp; month &gt; <span style="color:#ff0;font-weight:bold">2</span>)
</span></span><span style="display:flex;"><span>        totalDays += <span style="color:#ff0;font-weight:bold">1</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    totalDays + day
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>That&rsquo;s good enough for me, although I dislike its <code>for</code> loop.</p>
<p>Anyway, give me Swift and Haskell any day, over any Lisp. Life is too short for parentheses hell.</p>
]]></content>
        </item>
        
        <item>
            <title>CR: Truly Object-oriented in &#39;Twin Peaks&#39;</title>
            <link>https://dersavage.github.io/main/posts/2023/01/cr-truly-object-oriented-in-twin-peaks/</link>
            <pubDate>Sun, 29 Jan 2023 13:12:52 +0800</pubDate>
            
            <guid>https://dersavage.github.io/main/posts/2023/01/cr-truly-object-oriented-in-twin-peaks/</guid>
            <description>This is the first post in the CR&amp;ndash;Code Review&amp;ndash;series. I hit upon the idea after I found this interesting discussion regarding Swift playgrounds, book 2 (Let&amp;rsquo;s Code 2), chapter named &amp;lsquo;Twin Peaks&amp;rsquo; in Scrabtree&amp;rsquo;s website, where he lamented his very long solution compared to Samantha&amp;rsquo;s shorter solution.
The purpose of this CR is to bring learners&amp;rsquo; attention to an interesting thing about object orientation: objects can be interdependent even if they were instantiated independently.</description>
            <content type="html"><![CDATA[<p>This is the first post in the CR&ndash;Code Review&ndash;series. I hit upon the idea after I found this interesting discussion regarding Swift playgrounds, book 2 (Let&rsquo;s Code 2), chapter named &lsquo;Twin Peaks&rsquo; in <a href="https://scrabtree.svbtle.com/swift-twin-peaks">Scrabtree&rsquo;s website</a>, where he lamented his very long solution compared to <a href="https://youtu.be/oYZrIigmW_U">Samantha&rsquo;s shorter solution</a>.</p>
<p>The purpose of this CR is to bring learners&rsquo; attention to an interesting thing about object orientation: objects can be interdependent even if they were instantiated independently. In doing so, I also want to present a new and interesting solution to the &lsquo;Twin Peaks&rsquo; challenge, which solution totally bypasses the expected assumptions learners might have about this problem; that is, my motivation is to show that it is okay to devise solutions that may not toe the instruction line.</p>
<p>In this challenge, you are supposed to create an Expert() object, and a Character() object, where the expert&rsquo;s task is to tinker with the lock that controls the adjustable platform in the middle between the the twin peaks. Then the character is supposed to jump and move, collecting gems as they randomly appear. By the way, you are given the ability to place them whereever you like.</p>
<p>If the character reaches the end of the land (hits a block) it has to turn around. If we don&rsquo;t create such a turn-around rule, then character cannot turn around and continue moving and picking gems when it hits blockades at the outer edges of the land.</p>
<p>But, if we devise a turn-around rule for a blockade, the character would turn around on each step of the peaks. This can be overcome with the character.jump() method, but if we apply this rule, then it would not turn around when reaching the outer-edge blockades but simply keep on jumping.</p>
<p>Besides, you must also ensure the character can turn left or right according to specific conditions (such as when it is blocked, but not blocked on the left). The problem here is, if you devise a general rule for left or right turns, such a condition would also apply midway on peak steps, causing character to turn when he should be going straight to collect gems.</p>
<p>That occurs because the platform has been raised enough to allow character to turn left or right into the peaks. A tentative solution might have been to instruct expert to change the platform level so that the character does not turn left or right when he should not, but this would make the code longer than it should be, and also would create its own new problems.</p>
<p>Scrabtree&rsquo;s solution: (I have renamed character and expert as ch and ex respectively, to shorten the width):</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> totalGems = RandomNumberofGems
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> ex = Expert()
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> ch = <span style="color:#fff;font-weight:bold">Character</span>()
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">var</span> gemCount = <span style="color:#ff0;font-weight:bold">0</span>
</span></span><span style="display:flex;"><span>world.place(ex, facing: north, atColumn:<span style="color:#ff0;font-weight:bold">0</span>, row:<span style="color:#ff0;font-weight:bold">3</span>)
</span></span><span style="display:flex;"><span>world.place(ch, facing: north, atColumn:<span style="color:#ff0;font-weight:bold">4</span>, row:<span style="color:#ff0;font-weight:bold">0</span>)
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">func</span> rowRun() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> i <span style="color:#fff;font-weight:bold">in</span> <span style="color:#ff0;font-weight:bold">1.</span>..<span style="color:#ff0;font-weight:bold">6</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> ch.isOnGem {
</span></span><span style="display:flex;"><span>            gemCount += <span style="color:#ff0;font-weight:bold">1</span>
</span></span><span style="display:flex;"><span>            ch.collectGem()
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch.jump()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">func</span> turnLock(up:<span style="color:#fff;font-weight:bold">Bool</span>, turns: <span style="color:#fff;font-weight:bold">Int</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> up == <span style="color:#fff;font-weight:bold">true</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">for</span> i <span style="color:#fff;font-weight:bold">in</span> <span style="color:#ff0;font-weight:bold">1.</span>..turns {
</span></span><span style="display:flex;"><span>            ex.turnLockUp()
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">for</span> i <span style="color:#fff;font-weight:bold">in</span> <span style="color:#ff0;font-weight:bold">1.</span>..turns {
</span></span><span style="display:flex;"><span>            ex.turnLockDown()
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ex.turnRight()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">func</span> leftFace() {
</span></span><span style="display:flex;"><span>    ch.turnLeft()
</span></span><span style="display:flex;"><span>    ch.moveForward()
</span></span><span style="display:flex;"><span>    ch.turnLeft()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">func</span> rightFace() {
</span></span><span style="display:flex;"><span>    ch.turnRight()
</span></span><span style="display:flex;"><span>    ch.moveForward()
</span></span><span style="display:flex;"><span>    ch.turnRight()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>ex.moveForward()
</span></span><span style="display:flex;"><span>rowRun()
</span></span><span style="display:flex;"><span>turnLock(up:<span style="color:#fff;font-weight:bold">true</span>, turns:<span style="color:#ff0;font-weight:bold">3</span>)
</span></span><span style="display:flex;"><span>leftFace()
</span></span><span style="display:flex;"><span>rowRun()
</span></span><span style="display:flex;"><span>rightFace()
</span></span><span style="display:flex;"><span>rowRun()
</span></span><span style="display:flex;"><span>turnLock(up:<span style="color:#fff;font-weight:bold">false</span>, turns:<span style="color:#ff0;font-weight:bold">3</span>)
</span></span><span style="display:flex;"><span>rightFace()
</span></span><span style="display:flex;"><span>rowRun()
</span></span><span style="display:flex;"><span>leftFace()
</span></span></code></pre></div><p>By the way, his solution does not solve the puzzle:</p>

    <img src="/img/LowDrag.gif"  alt="lowdrag"  class="center"  style="border-radius: 8px;"  />


<p>He cites Samantha&rsquo;s solution as better because it is 31 lines. Indeed, it is quite succinct:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> totalGems = RandomNumberofGems
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> ex = Expert()
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> ch = <span style="color:#fff;font-weight:bold">Character</span>()
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">var</span> gemCount = <span style="color:#ff0;font-weight:bold">0</span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">func</span> moveLong() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> i <span style="color:#fff;font-weight:bold">in</span> <span style="color:#ff0;font-weight:bold">1.</span>..<span style="color:#ff0;font-weight:bold">6</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> ch.isOnGem {
</span></span><span style="display:flex;"><span>            ch.collectGem()
</span></span><span style="display:flex;"><span>            gemCount += <span style="color:#ff0;font-weight:bold">1</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch.jump()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">func</span> moveShort() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> i <span style="color:#fff;font-weight:bold">in</span> <span style="color:#ff0;font-weight:bold">1.</span>..<span style="color:#ff0;font-weight:bold">2</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> ch.isOnGem {
</span></span><span style="display:flex;"><span>            ch.collectGem()
</span></span><span style="display:flex;"><span>            gemCount += <span style="color:#ff0;font-weight:bold">1</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch.jump()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>world.place (ex, facing: north, atColumn:<span style="color:#ff0;font-weight:bold">1</span>, row:<span style="color:#ff0;font-weight:bold">4</span>)
</span></span><span style="display:flex;"><span>world.place (ch, facing: north, atColumn:<span style="color:#ff0;font-weight:bold">3</span>, row:<span style="color:#ff0;font-weight:bold">0</span>)
</span></span><span style="display:flex;"><span>ex.turnLock(up:<span style="color:#fff;font-weight:bold">true</span>, numberOfTimes:<span style="color:#ff0;font-weight:bold">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">while</span> gemCount &lt; totalGems {
</span></span><span style="display:flex;"><span>    moveLong()
</span></span><span style="display:flex;"><span>    ch.turnRight()
</span></span><span style="display:flex;"><span>    moveShort()
</span></span><span style="display:flex;"><span>    ch.turnRight()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Samantha&rsquo;s solution works everytime. In the above demo, I ran it twice. In the second run, you notice it took a considerably longer time to finish the task because this one character was going round and round. In other words, the object was overworked.</p>
<p>What I wanted to contribute to this discussion is the idea it is not necessary to make your objects work harder! Just create more objects. And then, you can also use the actions of one object to be a trigger for the actions of other objects. Here is my solution which is even shorter (23 lines) and did not even make use of functions, but I believe it is much clearer because I created three characters, made good use of OR and did away with the so-called expert. Here is a demonstration which also takes less time (one-third because now there are three objects, and also there is no time wasted on the expert) to finish the task:</p>

    <img src="/img/twinpeaks.gif"  alt="twinpeaks"  class="center"  style="border-radius: 8px;"  />


<p>First, I created three characters and named each ch, gh, and ph. Then I instructed them to do their job along their paths, but in order to circumvent the turn issue, I instructed ch, who was born on the platform to be the trigger. As soon as ch hits the edge block, it turns around, but so do the other two then. Because ch moves one step faster than the other two, sometimes this might cause a one-square lag in gh and ph, but eventually they catch up and turn, too. I ran the simulation 40 times and the solution worked each time:</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> totalGems = RandomNumberofGems
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> ch = <span style="color:#fff;font-weight:bold">Character</span>(), gh = <span style="color:#fff;font-weight:bold">Character</span>(), ph = <span style="color:#fff;font-weight:bold">Character</span>()
</span></span><span style="display:flex;"><span>world.place(ch, facing: .north, atColumn: <span style="color:#ff0;font-weight:bold">3</span>, row: <span style="color:#ff0;font-weight:bold">0</span> )
</span></span><span style="display:flex;"><span>world.place(gh, facing: .north, atColumn: <span style="color:#ff0;font-weight:bold">2</span>, row: <span style="color:#ff0;font-weight:bold">0</span> )
</span></span><span style="display:flex;"><span>world.place(ph, facing: .north, atColumn: <span style="color:#ff0;font-weight:bold">4</span>, row: <span style="color:#ff0;font-weight:bold">0</span> )
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">var</span> gems = <span style="color:#ff0;font-weight:bold">0</span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">while</span> gems &lt; totalGems{
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> ch.isOnGem || gh.isOnGem || ph.isOnGem {
</span></span><span style="display:flex;"><span>        ch.collectGem() || gh.collectGem() || ph.collectGem()
</span></span><span style="display:flex;"><span>                gems += <span style="color:#ff0;font-weight:bold">1</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ch.moveForward()
</span></span><span style="display:flex;"><span>    gh.jump()
</span></span><span style="display:flex;"><span>    ph.jump()
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> ch.isBlocked{
</span></span><span style="display:flex;"><span>        ch.turnLeft()
</span></span><span style="display:flex;"><span>        ch.turnLeft()
</span></span><span style="display:flex;"><span>        gh.turnLeft()
</span></span><span style="display:flex;"><span>        gh.turnLeft()
</span></span><span style="display:flex;"><span>        ph.turnLeft()
</span></span><span style="display:flex;"><span>        ph.turnLeft()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see, in my solution, it is easy to reason about the program. It make sense in one glance.</p>
<p>The key point is: code should be highly readable and short at the same time. Another key point: more objects doing simpler things is better than a few objects doing too many things. Another point:  use one object to trigger actions in other objects.</p>
]]></content>
        </item>
        
        <item>
            <title>MR: Inception: What on earth?</title>
            <link>https://dersavage.github.io/main/posts/2023/01/mr-inception-what-on-earth/</link>
            <pubDate>Sat, 28 Jan 2023 12:47:35 +0800</pubDate>
            
            <guid>https://dersavage.github.io/main/posts/2023/01/mr-inception-what-on-earth/</guid>
            <description>Posts labeled BR and AR are book and author reviews respectively. MR stands for movie reviews. I believe it is important to critically engage with movies, and in this post, I am going to rant about Inception.
Please don&amp;rsquo;t think I watched it. I really couldn&amp;rsquo;t bring myself to go beyond 17 minutes (out of 2+ hours). I think 17 minutes is enough to decide whether it is rubbish or not.</description>
            <content type="html"><![CDATA[<p>Posts labeled BR and AR are book and author reviews respectively. MR stands for movie reviews. I believe it is important to critically engage with movies, and in this post, I am going to rant about <em>Inception</em>.</p>
<p>Please don&rsquo;t think I watched it. I really couldn&rsquo;t bring myself to go beyond 17 minutes (out of 2+ hours). I think 17 minutes is enough to decide whether it is rubbish or not. In my opinion, it is a rubbish of the most interesting sort.</p>
<p>But how can it be? Out of 16000 reviews on Amazon, 95% are five- and four-star. On another platform, it has a 9.4 out of 10 rating. I decided to see what the hype was all about, so I patiently began watching until I really couldn&rsquo;t take it anymore.</p>
<p>Inception is a modern case of &rsquo;the emperor&rsquo;s new clothes&rsquo;. Either that, or the people who have positively rated it are really stupid. This is not saying people are stupid in general, though. I think many people who didn&rsquo;t like it perhaps did not even feel the need to leave a negative rating and simply moved on. I also think many intelligent people simply did not watch all of it, so the positive ratings is mostly by those who really did waste their precious 2+ hours watching a very bad movie, thinking it was a masterpiece.</p>
<p>I understand that art cannot satisfy everybody. You either like something or you don&rsquo;t. And that&rsquo;s fine. But there must be a standard, too. For instance, intelligent people should enjoy watching intelligent movies, so the probability of liking intelligent movies is higher for those who are capable of appreciating such movies. The converse is also true.</p>
<p>So why is it bad?</p>
<p>First of all, movies revolve around plot. It does not matter what kind of a plot it is&ndash;as long as it is logically consistent, understandable, and truly serving the artistic purpose. Inception is none of these. The actors are in a dream, from which they wake up and then upon waking they are in yet another dream, from which they wake up&ndash;but now viewer trust has been breached. How do I know the next scene is not a dream?</p>
<p>It blurs the line between reality and unreality, the same way a schizophrenic or another type of mentally ill person probably experiences. I would imagine this could even possibly be harmful to one&rsquo;s mental health. Even if I concede that this dream confusion is necessarily some kind of an innovation, it must have a justifiable purpose in the movie. But in the first 17 minutes, no such justification is offered. I still don&rsquo;t know why on earth these actors were &lsquo;inside each other&rsquo; heads, running around shooting and conspiring within one dream state without any apparent purpose or goals.</p>
<p>I think it must have been the greatest movie hoax of all time, or perhaps even a psychological experiment on viewers. It is hard to know what purpose this movie serves. It is clearly, not a movie, at least in the normal sense of what a movie is. Even the most confusing, chaotic, disordered, disconnected, illogical, and random dream I have had was more consistent and logical than Inception.</p>
<p>It reminds me of Zhuangzi&rsquo;s &rsquo;the usefulness of uselessness&rsquo;. Zhuangzi, the ancient Chinese sage, once satirically wrote that there is a certain tree that has no uses at all. It does not bear fruit, nor has it a shade. It cannot be used in carpentry because it is twisted and crooked, and it is too hard to be cut for firewood. (I have seen this tree, it really is like that.).</p>
<p>Zhuangzi says, this tree is useless in its traditional sense, but objectively, it is still useful because it is safe from harm. Because it is useless to humans, this uselessness is useful to itself, protecting it from harm. Similarly, just about the only useful thing about Inception is its usefulness to the makers who raked in the millions of dollars showing people something totally pointless and useless.</p>
<p>Worse, people did not even realize they were being had. If it has a number of famous stars, and there&rsquo;s a lot of action, and a plot too confusing to be understood, why, it must be good! Or else how could people come to terms with accepting they made a mistake and wasted their money? We want to reduce cognitive dissonance, and since, according to Descartes&rsquo;s sarcastic remark, we all possess too much common sense for our own good, then it is not easy to admit we were taken for a ride; instead, we will say, &lsquo;wow, it was a good movie, although I didn&rsquo;t understand it.&rsquo; Admitting it is good is soothing because it makes the sucker think he is not stupid&ndash;he can understand good art when he sees one. After all, others agree, look at the high ratings!</p>
<p>Another issue is how poorly written the script is. Even the actors felt it and did not feel anything. It shows. It seems like they just wanted to be done with it as soon as possible so they could cash in, move on, and forget about it. The movie did not transform them, it did not make them feel the connection an artist needs in order to convey that art. The script seems to have been written by someone who probably did not even finish high school. It is amateurish and immature. The person who wrote the script seems to be one of those people who thinks &lsquo;Twilight Zone&rsquo; is great literature.</p>
<p>Inception is about crumbling realities that are actually dreams within dreams within dreams within dreams within dreams, where a few thugs are chasing some Japanese tycoon for some reason which is not clear in the first 17 minutes. It blurs the line between reality and dream states, without any apparent logical connections, and a coherent storyline. On the surface, based on another person&rsquo;s review who revealed the plot, the thugs are running around in each others&rsquo; minds trying to plant ideas in the mind of some competitor&rsquo;s son, all in the name of making more profits for the Japanese tycoon who hired them to do this. But if that is the case, wouldn&rsquo;t the competitor&rsquo;s son hire his own hi-tech goons to do the same?</p>
<p>It does not make sense. All this sophistication and confusion just to plant ideas in someone&rsquo;s head for profits. Supposing this were interesting, why on earth was there the need to go into multiple dream states to do something like this? It reminds me of spaghetti code or the famous spaghetti powerpoint (you know which one). It is unnecessary complexity for no reason at all. The movie fails to inspire the viewer, it does not raise any philosophical questions, it does not take any stances.</p>
<p>It is a waste of time, and a waste of money. But it is useful enough to become a target of this rant.</p>
]]></content>
        </item>
        
        <item>
            <title>AR: Rubbishing Ayn Rand</title>
            <link>https://dersavage.github.io/main/posts/2023/01/ar-rubbishing-ayn-rand/</link>
            <pubDate>Sun, 15 Jan 2023 22:48:07 +0800</pubDate>
            
            <guid>https://dersavage.github.io/main/posts/2023/01/ar-rubbishing-ayn-rand/</guid>
            <description>In this AR (author review) series, of which this is a first post, I will be reviewing authors. My goal in this is two-fold: to convince myself that I have saved time not reading an author because of the inferior quality of their thoughts; and also, to engage in a debate of sorts with that author for the benefit of the good reader.
Today, the victim of my incisive criticism is Ayn Rand (or more accurtately, Alissa Zinovievna Rosenbaum).</description>
            <content type="html"><![CDATA[<p>In this AR (author review) series, of which this is a first post, I will be reviewing  authors. My goal in this is two-fold: to convince myself that I have saved time not reading an author because of the inferior quality of their thoughts; and also, to engage in a debate of sorts with that author for the benefit of the good reader.</p>
<p>Today, the victim of my incisive criticism is Ayn Rand (or more accurtately, Alissa Zinovievna Rosenbaum). Now, a discerning thinker might object: but how can you criticize someone you haven&rsquo;t read? Our answer is: do we need to befriend someone whose manners in the first few minutes of our acquaintance repulsed us? Time is gold, so a few paragraphs illustrating her thoughts would provide enough ammunition for a full-scale rubbishing.</p>
<p>Here is a golden one. In the preface to her <em>Fountainhead</em>, she wrote:</p>
<pre><code>  The possibly misleading sentence     
  is in Roark's speech:    
  &quot;From this simply necessity  
  to the highest religious   
  abstraction, from the wheel   
  to the skyscraper, everything   
  we are and everything we have    
  comes from a single attribute   
  of man - the function of his   
  reasoning mind.&quot;       

  This could be misinterpreted to  
  mean an endorsement of religion   
  or religious ideas. I remember   
  hesitating over that sentence,   
  when I wrote it, and deciding   
  that Roark's and my atheism, as   
  well as the overall spirit of   
  the book, were so clearly established   
  that no one would misunderstand    
  it, particularly since I said   
  that religious abstractions    
  are the product of man's mind,   
  not of supernatural revelation.    
</code></pre>
<p>That did it for me. You see, if you are someone like me, you catch the logical fallacy or cognitive error even if it eludes the person who said or wrote it. What is the &lsquo;it&rsquo; here? Note how she elevates the &lsquo;reasoning mind&rsquo; as the ultimate quasi-origin. The first inconsistency is this: if the reasoning mind can create skycrapers and wheels, how can it be wrong when it originates religion abstractions? Either wheels and skyscrapers are useless (or fake) if we accept Rand&rsquo;s idea that religion is a mere &lsquo;invention&rsquo;, or since they are not, then why would a &lsquo;reasoning mind&rsquo; even begin to contemplate such an &lsquo;invention&rsquo;? This betrays muddled, amateurish philosophastery on her part. No wonder no serious philosophers took her seriously (much to her disappointment; but she did persuade a few young and gullible people&hellip;).</p>
<p>Another inconsistency in her formulation is in assigning more power and role to the &lsquo;reasoning mind&rsquo; than our minds actually deserve. She takes the &lsquo;reasoning mind&rsquo; to be the end in itself, whereas greater minds than hers have subjugated reason to a higher goal: that is general knowledge and valid inferences leading to specific and useful Knowldedge. Leibnitz&rsquo;s <em>&lsquo;why is there something rather than nothing?&rsquo;</em> clearly places the &lsquo;reasoning mind&rsquo; in the category of a tool that is employed in the service of some end&ndash;and not an end unto itself. In fact, he elaborates on this elsewhere as well: &rsquo;the mechanical view of nature&rsquo; as &rsquo;extended matter&rsquo; is not &lsquo;sufficient to explain anything; and that hence the conception of a metaphysical something else, which is not extended, and which we may call force, must be added to that view.&rsquo; (Leibnitz and Kroeger, 30)</p>
<p>The next one, and this is a golden one, she claims &lsquo;religious abstractions&rsquo; are the product of a &lsquo;reasoning mind&rsquo;. In this, she contradicts herself but also betrays her ignorance of what religious &lsquo;abstractions&rsquo; really are. She lumps all religious experience into one, so that it creates an easy us-vs-them field. But there are so many different kinds of religions and each one has its own particular and different &lsquo;abstractions&rsquo;. Furthermore, the question of basis has been ignored. On what basis does the &lsquo;reasoning mind&rsquo; invent &lsquo;religious abstractions&rsquo;? In other words, she&rsquo;s saying we invent fake stories (she tries to avoid appearing too aggressive by calling them &lsquo;abstractions&rsquo;) that we tend to believe. This Gödelian though: if the mind is so unreliable to believe something itself invented, then the mind is unreliable. But she relies on the very mind to make her assertions!</p>
<p>Similarly, if some religions are based on logic and rationality (as is Islam, in fact. An objective reading of the Noble Quran would reveal a supremely logical foundation), wouldn&rsquo;t a &lsquo;reasoning mind&rsquo; want to seek it? If so true &lsquo;reasoning minds&rsquo; go to real religions, and not vice versa. To claim that religion is the product of a man&rsquo;s mind is to claim ChatGPT (AI engine) is capable of originality and creativity.</p>
<p>Yet, AI simply takes what is already there, and processes all that for output. No human &lsquo;reasoning mind&rsquo; is, likewise, capable of <em>inventing</em> religion because it is outside the human scope (so to speak). Indeed, by this definition, invented religions (you can think about a few) cannot qualify as true religions because the fundamental question of origin has not been properly answered. Given any human who claims to have discovered a religion (like Ron Hubbard who invented Scientology), it simply suffices to actually use our &lsquo;reasoning minds&rsquo; and ask, but how did he know? What makes him the &lsquo;knower&rsquo;?</p>
<p>The pseudo-philosophaster Rand likes to brag that she too knows, like Hubbard, but on the other extreme: she claims she knows where &lsquo;religious abstractions&rsquo; come from. But then the same question applies: and how does she know? Must we take her word for it because she wrote a book or two and read a few bad translations of Aristotle when she was a teenager? That&rsquo;s it?</p>
<p>Doesn&rsquo;t she realize that although she is averse to the idea of the &lsquo;supernatural&rsquo;, everything in this world is supernatural? Even nature itself! You throw a seed into the groun and up grows a large tree. Just like in the fairy stories&ndash;but now and here it is not a story but our reality. Since we are mysterious, marvelous and fantastic beings there is nothing &rsquo;natural&rsquo; about us. Indeed, this connotaton of &rsquo;nature&rsquo; is Marxist (and unfortunate) in that reality is defined as only what is there and seen or traced. Thus, according to materialists, nature is real, but what cannot be seen or traced is not real or does not exist.</p>
<p>Haven&rsquo;t they forgotten that they cannot forever see or trace exactly how memories are created and stored in the brain? It is as &lsquo;supernatural&rsquo; as you like, and yet, it is real, because it is being proved everyday in ourselves and others around us. Reality is that, which is true, which occurs. But just because we can&rsquo;t see it, or does not occur for us, or we can&rsquo;t trace it, it does not make it any less real. Our Saint of Balkh, Mawlawi wrote (see Abghari for a detailed discussion): &lsquo;It is not the fault of the sun if the blind cannot see it&rsquo;, meaning just because you close your eyes so that you don&rsquo;t see the sun, it does not follow that the sun is not there.</p>
<p>Religion is something higher than the &lsquo;reasoning mind&rsquo; so our minds are not capable to &lsquo;produce&rsquo; it if it is a real religion (and not a cult). True religions can be understood, initially, through logic and reasoning (they should, too, or else they are cults or fake) but it does not stop there; the higher levels of a true religion are beyond &lsquo;yes and no&rsquo; and  qil-o-qaal (<em>cognos et logos</em>); while true religion is understandable to basic logical extents, it stretches farther than the reaches of the mortal but reason-loving mind of humans.</p>
<p>Just as emotions are higher form of reasoning, so is religion an even higher form of experience that is, interestingly, solidly based on both reason and emotions (for the fallacy of emotionless religiousity, see Charlotte Brönte&rsquo;s <em>Jane Eyre</em>, the last few chapters where a religious missionary debates with Eyre.). In other words, although religion did not originate from our minds, our minds are capable, to a limited extent, of understanding it, and more generally feeling the need for it: this is why all over the world you see various races and tribes practicing some form of religion (even if not true or superstition-based). Even most atheists subscribe to supernaturalism more than they care to admit. In fact &lsquo;71% of atheists hold at least one supernatural belief&rsquo;(Lawton, 14). And where does that leave Rosenbaum?</p>
<p>Works Cited</p>
<p>Abghari, Nahid. Commentary on Mathnavi 1: A Fresh Approach to the Foundation of Theoretical Mysticism (Persian Edition). Bange Ney, 2016.</p>
<p>Brontë, Charlotte, and Lutz. Jane Eyre (Fourth Edition) (Norton Critical Editions). W. W. Norton, 2016.</p>
<p>Lawton, Graham. “Most Atheists Believe in the Supernatural.” New Scientist, vol. 242, no. 3233, Elsevier BV, June 2019, p. 14. <a href="https://doi.org/10.1016/s0262-4079(19)31013-9">https://doi.org/10.1016/s0262-4079(19)31013-9</a>.</p>
<p>Leibnitz, G. W., and A. E. Kroeger. “LEIBNITZ’S THEODICY.” The Journal of Speculative Philosophy, vol. 7, no. 4, 1873, pp. 30–42. JSTOR, <a href="http://www.jstor.org/stable/25665845">http://www.jstor.org/stable/25665845</a>. Accessed 22 Jan. 2023.</p>
<p>Rand, Ayn. The Fountainhead (Centennial Edition HC). Zaltbommel, Netherlands, Van Haren Publishing, 2005.</p>
]]></content>
        </item>
        
        <item>
            <title>BR: Middlemarch</title>
            <link>https://dersavage.github.io/main/posts/2022/11/br-middlemarch/</link>
            <pubDate>Mon, 21 Nov 2022 00:42:05 +0800</pubDate>
            
            <guid>https://dersavage.github.io/main/posts/2022/11/br-middlemarch/</guid>
            <description>Middlemarch by
George Eliot A book that was lauded (by Woolf) as the only British novel written for grownups. I dislike Woolf and I am not even sure why. There&amp;rsquo;s something off-putting in how her name, in combination with titles of some of her works, is perceived by me.
But I also disliked &amp;ldquo;George Eliot&amp;rdquo; without knowing exactly why. That was a long time ago, well before I knew it was a &amp;lsquo;she&amp;rsquo; and not a &amp;lsquo;he&amp;rsquo;, and &amp;ldquo;George Eliot&amp;rdquo; was a pseudonym.</description>
            <content type="html"><![CDATA[<h2 id="middlemarch">Middlemarch</h2>
<p>by</p>
<h5 id="george-eliot">George Eliot</h5>
<p>A book that was lauded (by Woolf) as the only British novel written for grownups. I dislike Woolf and I am not even sure why. There&rsquo;s something off-putting in how her name, in combination with titles of some of her works, is perceived by me.</p>
<p>But I also disliked &ldquo;George Eliot&rdquo; without knowing exactly why. That was a long time ago, well before I knew it was a &lsquo;she&rsquo; and not a &lsquo;he&rsquo;, and &ldquo;George Eliot&rdquo; was a pseudonym. Nevertheless, after I read somewhere that she was paid more than a majority of her contemporaries&ndash;themselves big names in the British literary scene&ndash;I decided to take the plunge and started with Middlemarch.</p>
<p>I know Eliot&rsquo;s fans will probably think I am biad or not intelligent enough to <strong>get</strong> her, but I found the whole 1000-page travesty of art a sort of mish-mash of Eliot trying to mimic true artists who lived way before her.</p>
<p>When I say art, I mean the kind that edifies, mollifies, ameliorates, engages, impacts, elevates, and even entertains&ndash;and not the pseudo-version that shocks (if you have been to art exhibitions). Eliot&rsquo;s art is shocking. She pretends to do all the above, but only ends up shocking and confusing.</p>
<p>It is a rant by an ugly girl who has sought solace in her intellect, but the intellectual capacity has been destroyed by lack of what Kant terms Good Will: that essential quality that makes intelligence useful or complete.</p>
<p>The rant attacks everything that has got on Eliot&rsquo;s nerves, and she makes sure to mock a variety of archetypes, the clergy included. I agree that some of the people mocked deserve it, and there is an element of truth in the mockery; after all, the mocking has to be justified on real-world evidence.</p>
<p>But art becomes biased when the mockery is one-sided. This is officially the definition of propaganda, where only one side of events is presented. In &ldquo;Deal Souls&rdquo;, the greatest artist to hail from eastern Europe, Nikolai Gogol, sets a very high standard when he mocks officials, farmers, peasants, educators, mayors, police chiefs, women, men, travelers, hotels, artists, and so forth.</p>
<p>But at the same time, he also provides a counter-example of what things ought to be like. He shows good archetypes as well, and uses them to counter the negativity arised from the merciless mockery. In using this contrast, Gogol achieves artistic illumination, but also a moralistically complete picture&ndash;which is what art is actually for.</p>
<p>In Middlemarch, such a moralistically complete picture, such a balanced view is missing. Whoever has angered Eliot will be scorched, including the prettier women, who, in the archetype of Rosamond, are villified and attacked till the very end.</p>
<p>A lot more can be said about Middlemarch, but nothing positive. Still, the reason I kept on reading even when the writing was stifling and full of unrealistic ideas and incessant moping, an amateurish preoccupation with British politics (oh the irony!) and a third-class entertainment, I learned a great deal about human nature and abnormal psychology, though (my subject was Eliot herself).</p>
<p>Will I be reading another Eliot? Most probably not, unless I am in a scientific mood and want to psychoanalyze a mediocre writer by experimenting and observing her in &ldquo;action&rdquo;. No, on second thoughts, no. Life is too short for a 1000-page mediocre work whose main attraction is a biased mockery of certain social archetypes, interspersed with hints about how knowledgeable and great the author is!</p>
]]></content>
        </item>
        
        <item>
            <title>BR: Where Evil Resides</title>
            <link>https://dersavage.github.io/main/posts/2022/10/br-where-evil-resides/</link>
            <pubDate>Sun, 02 Oct 2022 20:19:24 +0800</pubDate>
            
            <guid>https://dersavage.github.io/main/posts/2022/10/br-where-evil-resides/</guid>
            <description>Where Evil Resides by
Clifford Simak (BR: Book Review)
Recently managed to go through Simak&amp;rsquo;s fantasy title: Where Evil Resides, which made me wonder why a writer like Simak became famous in the first place? But again I see morons like Updike and it doesn&amp;rsquo;t surprise me: not all readers are intelligent enough to know what they should be reading.
Simak is nothing special. The story is flat, the characteras uni-dimensional.</description>
            <content type="html"><![CDATA[<h2 id="where-evil-resides">Where Evil Resides</h2>
<p>by</p>
<h5 id="clifford-simak">Clifford Simak</h5>
<p>(BR: Book Review)</p>
<p>Recently managed to go through Simak&rsquo;s fantasy title: <em>Where Evil Resides</em>, which made me wonder why a writer like Simak became famous in the first place? But again I see morons like Updike and it doesn&rsquo;t surprise me: not all readers are intelligent enough to know what they should be reading.</p>
<p>Simak is nothing special. The story is flat, the characteras uni-dimensional. The allegorical context-play is shoddy and confusing, and it seems he winged it as he wrote along.</p>
<p>One finds it hard to develop sympathy for any of the characters, and the the way the main protagonist treats the troll is heart-breaking and probably a psychological projection of the author&rsquo;s own Mr. Hyde.</p>
<p>There is nothing to learn and the entertainment was not entertaining at all. I won&rsquo;t be reading any more Simak books.</p>
]]></content>
        </item>
        
        <item>
            <title>BR: Darker than Amber</title>
            <link>https://dersavage.github.io/main/posts/2022/06/br-darker-than-amber/</link>
            <pubDate>Thu, 23 Jun 2022 08:28:02 +0800</pubDate>
            
            <guid>https://dersavage.github.io/main/posts/2022/06/br-darker-than-amber/</guid>
            <description>Darker than Amber John Macdonald (BR: Book Review)
Don&amp;rsquo;t know what the fuss is all about. I read the reviews which were glowing, but the book didn&amp;rsquo;t deliver on those reviews.
The problem is that MacDonald is confused. He mixes his own conflated view of morality in the context of a poorly-constructed detective story, and the outcome is mangled mess of opinion and long, boring descriptions of rooms and furniture, with a few sleaze quirks thrown here and there.</description>
            <content type="html"><![CDATA[<h2 id="darker-than-amber">Darker than Amber</h2>
<h5 id="john-macdonald">John Macdonald</h5>
<p>(BR: Book Review)</p>
<p>Don&rsquo;t know what the fuss is all about. I read the reviews which were glowing, but the book didn&rsquo;t deliver on those reviews.</p>
<p>The problem is that MacDonald is confused. He mixes his own conflated view of morality in the context of a poorly-constructed detective story, and the outcome is mangled mess of opinion and long, boring descriptions of rooms and furniture, with a few sleaze quirks thrown here and there.</p>
<p>The story almost borders on fantastical, and feels like a bad mix of Hollywood on steroids and a happier, weirder Trollope.</p>
<p>Not recommended.</p>
]]></content>
        </item>
        
    </channel>
</rss>
